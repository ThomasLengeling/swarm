#ifndef _SWARM_BUTTONS_H
#define _SWARM_BUTTONS_H

#include <stdbool.h>
#include <stdint.h>

#include "nrf.h"
#include "nordic_common.h"
#include "boards.h"

#include "bsp.h"

// Headers and defines needed by the logging interface
#include "log.h"
#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"

#include "color.h"

#define BUTTON_COLORS_COUNT 62
// G R B
static btn_color_t button_colors[BUTTON_COLORS_COUNT] = {
    {0x00, 0x80, 0x00}, {0x70, 0x80, 0x90}, {0x87, 0xCE, 0xEB},
    {0x00, 0x8B, 0x8B}, {0x7B, 0x68, 0xEE}, {0x46, 0x82, 0xB4},
    {0x69, 0x69, 0x69}, {0x8F, 0xBC, 0x8F}, {0x48, 0x3D, 0x8B},
    {0x00, 0xFF, 0xFF}, {0x1E, 0x90, 0xFF}, {0x19, 0x19, 0x70},
    {0x48, 0xD1, 0xCC}, {0x32, 0xCD, 0x32}, {0x6A, 0x5A, 0xCD},
    {0x66, 0xCD, 0xAA}, {0x00, 0xFF, 0x00}, {0x8B, 0x45, 0x13},
    {0x80, 0x80, 0x00}, {0x7F, 0xFF, 0x00}, {0xA9, 0xA9, 0xA9},
    {0x4B, 0x00, 0x82}, {0xA0, 0x52, 0x2D}, {0x20, 0xB2, 0xAA},
    {0x99, 0x32, 0xCC}, {0x8B, 0x00, 0x8B}, {0x7F, 0xFF, 0xD4},
    {0x00, 0xBF, 0xFF}, {0x94, 0x00, 0xD3}, {0x00, 0x00, 0x80},
    {0x3C, 0xB3, 0x71}, {0x22, 0x8B, 0x22}, {0x9A, 0xCD, 0x32},
    {0x2E, 0x8B, 0x57}, {0x40, 0xE0, 0xD0}, {0xA5, 0x2A, 0x2A},
    {0x00, 0xFF, 0x7F}, {0x98, 0xFB, 0x98}, {0x80, 0x00, 0x80},
    {0x41, 0x69, 0xE1}, {0xAD, 0xD8, 0xE6}, {0x00, 0xCE, 0xD1},
    {0x00, 0xFA, 0x9A}, {0x00, 0x00, 0xFF}, {0x2F, 0x4F, 0x4F},
    {0x00, 0x80, 0x80}, {0x64, 0x95, 0xED}, {0x80, 0x80, 0x80},
    {0x00, 0x00, 0xCD}, {0x8B, 0x00, 0x00}, {0x00, 0xFF, 0xFF},
    {0x80, 0x00, 0x00}, {0x6B, 0x8E, 0x23}, {0x90, 0xEE, 0x90},
    {0x7C, 0xFC, 0x00}, {0x8A, 0x2B, 0xE2}, {0x77, 0x88, 0x99},
    {0x00, 0x64, 0x00}, {0x55, 0x6B, 0x2F}, {0x87, 0xCE, 0xFA},
    {0x5F, 0x9E, 0xA0}, {0x93, 0x70, 0xDB},
};

#define BUTTON_PATTERNS_COUNT 3
typedef enum
{
    BUTTON_PATTERN_WHOLE_FADE = 0,
    BUTTON_PATTERN_METEOR = 1,
    BUTTON_PATTERN_FIRE = 2
} btn_pattern_t;

static uint8_t selected_button_color = 0;
static btn_pattern_t selected_button_pattern = BUTTON_PATTERN_WHOLE_FADE;
static btn_color_t m_current_color = {0xFF, 0x00, 0x00};
static btn_color_t m_next_color = {0x00, 0x00, 0x00};

btn_pattern_t btn_current_pattern();
void set_button_pattern(btn_pattern_t next_pattern);
void advance_button_pattern(uint8_t direction);

btn_color_t btn_current_color();
btn_color_t btn_next_color();
void set_next_color(btn_color_t next_color);
void advance_button_color(uint8_t direction);

void bsp_evt_handler(bsp_event_t evt);
void bsp_configuration();
void button_handler(uint8_t pin_no, uint8_t button_action);

#endif
